/******************************************************************************
* File Name :   mclib.h
* Author :      Клиначев Николай Васильевич
* Version :     1.0.1
* Date :        20150614
* Description : Библиотеки IQ-Math library и Motor Control library
*       Библиотека математических преобразователей, необходимых
*       при реализации цифровых систем управления электропривода
*       и необходимые макросы целочисленной арифметики (IQ-математика)
*******************************************************************************/
/* Защита от рекурсивных подключений библиотеки-------------------------------*/
#ifndef __MCLIB_H
#define __MCLIB_H
/* Includes ------------------------------------------------------------------*/
#include "MDR32Fx.h"   // Подключаем библиотеки производителя процессора
/* Exported types ------------------------------------------------------------*/
// ******************************************************************************* //
typedef signed short s16;
typedef unsigned short u16;
typedef long  _iq;    // это _iq24:  -128 .. 127.999999940  0.000000060
// ******************************************************************************* //
// Интегратор Угла и другие координаты, связанные с положением ротора
typedef struct {
    _iq *yS;        // Input: Указатель на Скорость вала, [-1.0, 1.0]
    _iq Angle;      // Input: angle in PU [0.0, 0.99999] (_Q15: 0000..7FFF)
    _iq Sine;       // Output _Q24: (8000..FFFF-0000..7FFF) << (24 - 15)
    _iq Cosine;     // Output _Q24: (8000..FFFF-0000..7FFF) << (24 - 15)
}
ROTOR_TypeDef;
// ******************************************************************************* //
typedef struct 
	{
    _iq gS;    // Output: Уставка Скорости, [об/мин/BASE_SPD_RPM],[-1.0, +1.0],(pu)
    _iq GdV;   // Output: d-Катет управляющего значения для ШИМ,  [-1.0, 1.0), (pu)
    _iq GqV;   // Output: q-Катет управляющего значения для ШИМ,  [-1.0, 1.0), (pu)
    FunctionalState SVPWM_Enable; // Output: флаг ативизации SVPWM
  } SETPOINTS_TypeDef; 
// Инверсный преобразователь Парка
typedef struct {
    _iq *d;         // Input: Вещественная составляющая координаты (по оси d)
    _iq *q;         // Input: Мнимая составляющая координаты (по оси q)
    _iq *Sine;      // Input: Указатель на опорный синусоидальный сигнал (pu)
    _iq *Cosine;    // Input: Указатель на опорный косинусоидальный сигнал (pu)
    _iq a;          // Output: Alpha-фаза вращающейся координаты (сдвиг - 0 градусов)
    _iq b;          // Output: Beta-фаза вращающейся координаты (сдвиг - 90 градусов)
}
PIPARK_TypeDef;
// ******************************************************************************* //
// Преобразователь числа фаз (двухфазной системы в трехфазную)
typedef struct {
    _iq *a;         // Input: Alpha-фаза вращающейся координаты (сдвиг - 0 градусов)
    _iq *b;         // Input: Beta-фаза вращающейся координаты (сдвиг - 90 градусов)
    _iq  u;         // Output: U-фаза трехфазной системы UVW
    _iq  v;         // Output: V-фаза трехфазной системы UVW
    _iq  w;         // Output: W-фаза трехфазной системы UVW
}
PICLARKE_TypeDef;
/* Exported constants --------------------------------------------------------*/
/* Exported macro ------------------------------------------------------------*/
//#define GLOBAL_Q 24   // Для ЦСУ электропривода достаточная точность чисел Q24
// _iq24:  -128 .. 127.999999940  0.000000060
#define _IQ(A)          (long) ((A) * 16777216.0L) // _IQ24
// _iq15:    -1 .. +1 - 0.000030517578125
#define _IQ15(A)        (s16) ((A) * 32768.0L)
/*******************************************************************************
* Description :  Макрос преобразования биполярного значения
*                к униполярному с масштабированием
* Input : x    - число в формате _Q15: 8000..FFFF-0000..7FFF
* Param : BASE - униполярное число: 0000..FFFF, на 1 большее MAX значения
* Return :       0x0000 .. (base - 1)
*/
#define _Q15toBASE(x, BASE) ((uint32_t) ((s16) (x) + 0x8000) * ((u16) (BASE)) >> 16)
#define _IQtoIQ15(A)        ((long) (A) >> (24 - 15))
#define _IQdiv2(A)          ((A) >> 1)
#define _IQmpy(A, B)        (long) (((long long) (A) * (long long) (B)) >> 24)

/* Exported functions ------------------------------------------------------- */
void ROTOR_GetTrigonometic(ROTOR_TypeDef* Rotor);

#endif /* __MCLIB_H */

